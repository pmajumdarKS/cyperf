# coding: utf-8

"""
    CyPerf Application API

    CyPerf REST API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cyperf.models.application import Application
from typing import Optional, Set, Union, GenericAlias, get_args
from typing_extensions import Self
from pydantic import Field
#from cyperf.models import LinkNameException

if "AppsecApp" != "APILink":
    from cyperf.models.api_link import APILink

class AppsecApp(BaseModel):
    """
    AppsecApp
    """ # noqa: E501
    app: Optional[Application] = Field(default=None, alias="App")
    description: Optional[StrictStr] = Field(default=None, description="The description of the application", alias="Description")
    name: Optional[StrictStr] = Field(default=None, description="The user friendly name of the application", alias="Name")
    static: Optional[StrictBool] = Field(default=None, description="If true, the application/strike is generated from Controller", alias="Static")
    user_defined: Optional[StrictBool] = Field(default=None, description="If true, the application was created by the user", alias="UserDefined")
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the application")
    owner: Optional[StrictStr] = Field(default=None, description="The friendly display name of the application's owner")
    owner_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the application's owner", alias="ownerId")
    links: Optional[List[APILink]] = Field(default=None, description="Links to other properties")
#    api_client: Optional[Any] = None
    __properties: ClassVar[List[str]] = ["App", "Description", "Name", "Static", "UserDefined", "id", "owner", "ownerId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


#    @property
#    def rest_app(self):
#        if self.app is not None:
#            return self.app
#        field_info = self.__class__.__fields__["app"]
#        try:
#            self.app =  self.link_based_request(field_info.alias, "GET", return_type="Application")
#        except LinkNameException as e:
#            self.app =  self.link_based_request("app", "GET", return_type="Application")
#        return self.app
#
#    @rest_app.setter
#    def rest_app(self, value):
#        self.app = value

#    @property
#    def rest_description(self):
#        if self.description is not None:
#            return self.description
#        field_info = self.__class__.__fields__["description"]
#        try:
#            self.description =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.description =  self.link_based_request("description", "GET", return_type="str")
#        return self.description
#
#    @rest_description.setter
#    def rest_description(self, value):
#        self.description = value

#    @property
#    def rest_name(self):
#        if self.name is not None:
#            return self.name
#        field_info = self.__class__.__fields__["name"]
#        try:
#            self.name =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.name =  self.link_based_request("name", "GET", return_type="str")
#        return self.name
#
#    @rest_name.setter
#    def rest_name(self, value):
#        self.name = value

#    @property
#    def rest_static(self):
#        if self.static is not None:
#            return self.static
#        field_info = self.__class__.__fields__["static"]
#        try:
#            self.static =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.static =  self.link_based_request("static", "GET", return_type="bool")
#        return self.static
#
#    @rest_static.setter
#    def rest_static(self, value):
#        self.static = value

#    @property
#    def rest_user_defined(self):
#        if self.user_defined is not None:
#            return self.user_defined
#        field_info = self.__class__.__fields__["user_defined"]
#        try:
#            self.user_defined =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.user_defined =  self.link_based_request("user_defined", "GET", return_type="bool")
#        return self.user_defined
#
#    @rest_user_defined.setter
#    def rest_user_defined(self, value):
#        self.user_defined = value

#    @property
#    def rest_id(self):
#        if self.id is not None:
#            return self.id
#        field_info = self.__class__.__fields__["id"]
#        try:
#            self.id =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.id =  self.link_based_request("id", "GET", return_type="str")
#        return self.id
#
#    @rest_id.setter
#    def rest_id(self, value):
#        self.id = value

#    @property
#    def rest_owner(self):
#        if self.owner is not None:
#            return self.owner
#        field_info = self.__class__.__fields__["owner"]
#        try:
#            self.owner =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.owner =  self.link_based_request("owner", "GET", return_type="str")
#        return self.owner
#
#    @rest_owner.setter
#    def rest_owner(self, value):
#        self.owner = value

#    @property
#    def rest_owner_id(self):
#        if self.owner_id is not None:
#            return self.owner_id
#        field_info = self.__class__.__fields__["owner_id"]
#        try:
#            self.owner_id =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.owner_id =  self.link_based_request("owner_id", "GET", return_type="str")
#        return self.owner_id
#
#    @rest_owner_id.setter
#    def rest_owner_id(self, value):
#        self.owner_id = value



    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppsecApp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "static",
            "user_defined",
            "id",
            "owner",
            "owner_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app
        if self.app:
            _dict['App'] = self.app.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppsecApp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            _obj = cls.model_validate(obj)
#            _obj.api_client = client
            return _obj

        _obj = cls.model_validate({
            "App": Application.from_dict(obj["App"]) if obj.get("App") is not None else None,
                        "Description": obj.get("Description"),
                        "Name": obj.get("Name"),
                        "Static": obj.get("Static"),
                        "UserDefined": obj.get("UserDefined"),
                        "id": obj.get("id"),
                        "owner": obj.get("owner"),
                        "ownerId": obj.get("ownerId")
            ,
            "links": obj.get("links")
        })
#        _obj.api_client = client
        return _obj

#    def update(self):
#        self.link_request("self", "PUT", body=self)
#
#   def link_based_request(self, link_name, method, return_type = None, body = None):
#        if self.links == None:
#           raise Exception("You must allow links to be present to use automatic retrieval functions.")
#        if link_name == 'self':
#            self_links = [link for link in self.links if link.rel == link_name]
#        else:
#            self_links = [link for link in self.links if link.rel == "child" and link.name == link_name]
#        if len(self_links) == 0:
#           raise LinkNameException(f"Missing {link_name} link.")
#        self_link = self_links[0]
#        
#        _host = None
#
#        _collection_formats: Dict[str, str] = {
#        }#
#
#        _path_params: Dict[str, str] = {}
#        _query_params: List[Tuple[str, str]] = []
#        _header_params: Dict[str, Optional[str]] = {}
#        _form_params: List[Tuple[str, str]] = []
#        _files: Dict[str, Union[str, bytes]] = {}
#        _body_params: Optional[bytes] = None
#        if body:
#            _body_params = body.to_json().encode('utf-8')
#
#        # set the HTTP header `Accept`
#        if 'Accept' not in _header_params:
#            _header_params['Accept'] = self.api_client.select_header_accept(
#                [
#                    'application/json'
#                ]
#            )
#        if 'Content-Type' not in _header_params:
#            _header_params['Content-Type'] = self.api_client.select_header_content_type(
#                [
#                    'application/json'
#                ]
#            )
#        _auth_settings: List[str] = [
#            'OAuth2',
#        ]
#        _param = self.api_client.param_serialize(
#            method=method,
#           resource_path=self_link.href,
#            path_params=_path_params,
#           query_params=_query_params,
#           body=_body_params,
#            post_params=_form_params,
#            files=_files,
#            auth_settings=_auth_settings,
#            collection_formats=_collection_formats,
#            _host=_host
#        )
#        response_data = self.api_client.call_api(
#            *_param
#        )
#        response_data.read()
#        response_types = {
#            '200': return_type,
#            '500': 'ErrorResponse'
#        }
#        return self.api_client.response_deserialize(response_data, response_types).data
    


