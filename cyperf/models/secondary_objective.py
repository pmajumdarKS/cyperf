# coding: utf-8

"""
    CyPerf Application API

    CyPerf REST API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from cyperf.models.objective_type import ObjectiveType
from typing import Optional, Set, Union, GenericAlias, get_args
from typing_extensions import Self
from pydantic import Field
#from cyperf.models import LinkNameException

if "SecondaryObjective" != "APILink":
    from cyperf.models.api_link import APILink

class SecondaryObjective(BaseModel):
    """
    SecondaryObjective
    """ # noqa: E501
    enabled: StrictBool = Field(description="If false, the values of this objective will be ignored.", alias="Enabled")
    max_pending_simulated_users: Annotated[str, Field(strict=True)] = Field(description="Only applies if Type is SimulatedUsers. The maximum number or percentage of users that can be in the pending state (not yet connected and sending traffic) at any time. You can either specify a number or a percentage using the % sign.", alias="MaxPendingSimulatedUsers")
    max_simulated_users_per_interval: Optional[StrictInt] = Field(default=None, description="Only applies if Type is SimulatedUsers. The maximum number of simulated users at which new users are initiated and teardown per interval(1 second). Default value is 0 (no limit)", alias="MaxSimulatedUsersPerInterval")
    objective_unit: StrictStr = Field(description="The objective's unit.", alias="ObjectiveUnit")
    objective_value: Union[StrictFloat, StrictInt] = Field(description="The value of the secondary objective. This value will be used for the whole duration of the test.", alias="ObjectiveValue")
    type: ObjectiveType = Field(description="The objective's type (default: SimulatedUsers).", alias="Type")
    links: Optional[List[APILink]] = Field(default=None, description="Links to other properties")
#    api_client: Optional[Any] = None
    __properties: ClassVar[List[str]] = ["Enabled", "MaxPendingSimulatedUsers", "MaxSimulatedUsersPerInterval", "ObjectiveUnit", "ObjectiveValue", "Type"]

    @field_validator('max_pending_simulated_users')
    def max_pending_simulated_users_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9]+%?$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]+%?$/")
        return value

    @field_validator('objective_unit')
    def objective_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['', 'bps', 'Kbps', 'Mbps', 'Gbps']):
            raise ValueError("must be one of enum values ('', 'bps', 'Kbps', 'Mbps', 'Gbps')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


#    @property
#    def rest_enabled(self):
#        if self.enabled is not None:
#            return self.enabled
#        field_info = self.__class__.__fields__["enabled"]
#        try:
#            self.enabled =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.enabled =  self.link_based_request("enabled", "GET", return_type="bool")
#        return self.enabled
#
#    @rest_enabled.setter
#    def rest_enabled(self, value):
#        self.enabled = value

#    @property
#    def rest_max_pending_simulated_users(self):
#        if self.max_pending_simulated_users is not None:
#            return self.max_pending_simulated_users
#        field_info = self.__class__.__fields__["max_pending_simulated_users"]
#        try:
#            self.max_pending_simulated_users =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.max_pending_simulated_users =  self.link_based_request("max_pending_simulated_users", "GET", return_type="str")
#        return self.max_pending_simulated_users
#
#    @rest_max_pending_simulated_users.setter
#    def rest_max_pending_simulated_users(self, value):
#        self.max_pending_simulated_users = value

#    @property
#    def rest_max_simulated_users_per_interval(self):
#        if self.max_simulated_users_per_interval is not None:
#            return self.max_simulated_users_per_interval
#        field_info = self.__class__.__fields__["max_simulated_users_per_interval"]
#        try:
#            self.max_simulated_users_per_interval =  self.link_based_request(field_info.alias, "GET", return_type="int")
#        except LinkNameException as e:
#            self.max_simulated_users_per_interval =  self.link_based_request("max_simulated_users_per_interval", "GET", return_type="int")
#        return self.max_simulated_users_per_interval
#
#    @rest_max_simulated_users_per_interval.setter
#    def rest_max_simulated_users_per_interval(self, value):
#        self.max_simulated_users_per_interval = value

#    @property
#    def rest_objective_unit(self):
#        if self.objective_unit is not None:
#            return self.objective_unit
#        field_info = self.__class__.__fields__["objective_unit"]
#        try:
#            self.objective_unit =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.objective_unit =  self.link_based_request("objective_unit", "GET", return_type="str")
#        return self.objective_unit
#
#    @rest_objective_unit.setter
#    def rest_objective_unit(self, value):
#        self.objective_unit = value

#    @property
#    def rest_objective_value(self):
#        if self.objective_value is not None:
#            return self.objective_value
#        field_info = self.__class__.__fields__["objective_value"]
#        try:
#            self.objective_value =  self.link_based_request(field_info.alias, "GET", return_type="float")
#        except LinkNameException as e:
#            self.objective_value =  self.link_based_request("objective_value", "GET", return_type="float")
#        return self.objective_value
#
#    @rest_objective_value.setter
#    def rest_objective_value(self, value):
#        self.objective_value = value

#    @property
#    def rest_type(self):
#        if self.type is not None:
#            return self.type
#        field_info = self.__class__.__fields__["type"]
#        try:
#            self.type =  self.link_based_request(field_info.alias, "GET", return_type="ObjectiveType")
#        except LinkNameException as e:
#            self.type =  self.link_based_request("type", "GET", return_type="ObjectiveType")
#        return self.type
#
#    @rest_type.setter
#    def rest_type(self, value):
#        self.type = value



    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecondaryObjective from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecondaryObjective from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            _obj = cls.model_validate(obj)
#            _obj.api_client = client
            return _obj

        _obj = cls.model_validate({
            "Enabled": obj.get("Enabled"),
                        "MaxPendingSimulatedUsers": obj.get("MaxPendingSimulatedUsers"),
                        "MaxSimulatedUsersPerInterval": obj.get("MaxSimulatedUsersPerInterval"),
                        "ObjectiveUnit": obj.get("ObjectiveUnit"),
                        "ObjectiveValue": obj.get("ObjectiveValue"),
                        "Type": obj.get("Type")
            ,
            "links": obj.get("links")
        })
#        _obj.api_client = client
        return _obj

#    def update(self):
#        self.link_request("self", "PUT", body=self)
#
#   def link_based_request(self, link_name, method, return_type = None, body = None):
#        if self.links == None:
#           raise Exception("You must allow links to be present to use automatic retrieval functions.")
#        if link_name == 'self':
#            self_links = [link for link in self.links if link.rel == link_name]
#        else:
#            self_links = [link for link in self.links if link.rel == "child" and link.name == link_name]
#        if len(self_links) == 0:
#           raise LinkNameException(f"Missing {link_name} link.")
#        self_link = self_links[0]
#        
#        _host = None
#
#        _collection_formats: Dict[str, str] = {
#        }#
#
#        _path_params: Dict[str, str] = {}
#        _query_params: List[Tuple[str, str]] = []
#        _header_params: Dict[str, Optional[str]] = {}
#        _form_params: List[Tuple[str, str]] = []
#        _files: Dict[str, Union[str, bytes]] = {}
#        _body_params: Optional[bytes] = None
#        if body:
#            _body_params = body.to_json().encode('utf-8')
#
#        # set the HTTP header `Accept`
#        if 'Accept' not in _header_params:
#            _header_params['Accept'] = self.api_client.select_header_accept(
#                [
#                    'application/json'
#                ]
#            )
#        if 'Content-Type' not in _header_params:
#            _header_params['Content-Type'] = self.api_client.select_header_content_type(
#                [
#                    'application/json'
#                ]
#            )
#        _auth_settings: List[str] = [
#            'OAuth2',
#        ]
#        _param = self.api_client.param_serialize(
#            method=method,
#           resource_path=self_link.href,
#            path_params=_path_params,
#           query_params=_query_params,
#           body=_body_params,
#            post_params=_form_params,
#            files=_files,
#            auth_settings=_auth_settings,
#            collection_formats=_collection_formats,
#            _host=_host
#        )
#        response_data = self.api_client.call_api(
#            *_param
#        )
#        response_data.read()
#        response_types = {
#            '200': return_type,
#            '500': 'ErrorResponse'
#        }
#        return self.api_client.response_deserialize(response_data, response_types).data
    


