# coding: utf-8

"""
    CyPerf Application API

    CyPerf REST API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cyperf.models.authentication_settings import AuthenticationSettings
from cyperf.models.p1_config import P1Config
from cyperf.models.p2_config import P2Config
from cyperf.models.protected_subnet_config import ProtectedSubnetConfig
from cyperf.models.remote_access import RemoteAccess
from cyperf.models.timers import Timers
from typing import Optional, Set, Union, GenericAlias, get_args
from typing_extensions import Self
from pydantic import Field
#from cyperf.models import LinkNameException

if "IPSecRange" != "APILink":
    from cyperf.models.api_link import APILink

class IPSecRange(BaseModel):
    """
    IPSecRange
    """ # noqa: E501
    var_auth_settings: Optional[AuthenticationSettings] = Field(default=None, alias="AuthSettings")
    ike_phase1_config: Optional[P1Config] = Field(default=None, alias="IKEPhase1Config")
    ike_phase2_config: Optional[P2Config] = Field(default=None, alias="IKEPhase2Config")
    ip_sec_range_name: Annotated[str, Field(strict=True)] = Field(alias="IPSecRangeName")
    multi_p2_over_p1: StrictBool = Field(alias="MultiP2OverP1")
    protected_sub_config: Optional[ProtectedSubnetConfig] = Field(default=None, alias="ProtectedSubConfig")
    public_peer: Annotated[str, Field(strict=True)] = Field(alias="PublicPeer")
    public_peer_increment: Annotated[str, Field(strict=True)] = Field(alias="PublicPeerIncrement")
    remote_access: Optional[RemoteAccess] = Field(default=None, alias="RemoteAccess")
    test_scenario: StrictStr = Field(alias="TestScenario")
    timers: Optional[Timers] = Field(default=None, alias="Timers")
    tunnel_count_per_outer_ip: StrictInt = Field(alias="TunnelCountPerOuterIP")
    id: StrictStr
    links: Optional[List[APILink]] = Field(default=None, description="Links to other properties")
#    api_client: Optional[Any] = None
    __properties: ClassVar[List[str]] = ["AuthSettings", "IKEPhase1Config", "IKEPhase2Config", "IPSecRangeName", "MultiP2OverP1", "ProtectedSubConfig", "PublicPeer", "PublicPeerIncrement", "RemoteAccess", "TestScenario", "Timers", "TunnelCountPerOuterIP", "id"]

    @field_validator('ip_sec_range_name')
    def ip_sec_range_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^$|^[^\"\\]+$", value):
            raise ValueError(r"must validate the regular expression /^$|^[^\"\\]+$/")
        return value

    @field_validator('public_peer')
    def public_peer_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^$|(^(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$)", value):
            raise ValueError(r"must validate the regular expression /^$|(^(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$)/")
        return value

    @field_validator('public_peer_increment')
    def public_peer_increment_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^$|(^(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$)", value):
            raise ValueError(r"must validate the regular expression /^$|(^(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$)/")
        return value

    @field_validator('test_scenario')
    def test_scenario_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['REMOTE-ACCESS', 'SITE-TO-SITE']):
            raise ValueError("must be one of enum values ('REMOTE-ACCESS', 'SITE-TO-SITE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


#    @property
#    def rest_var_auth_settings(self):
#        if self.var_auth_settings is not None:
#            return self.var_auth_settings
#        field_info = self.__class__.__fields__["var_auth_settings"]
#        try:
#            self.var_auth_settings =  self.link_based_request(field_info.alias, "GET", return_type="AuthenticationSettings")
#        except LinkNameException as e:
#            self.var_auth_settings =  self.link_based_request("var_auth_settings", "GET", return_type="AuthenticationSettings")
#        return self.var_auth_settings
#
#    @rest_var_auth_settings.setter
#    def rest_var_auth_settings(self, value):
#        self.var_auth_settings = value

#    @property
#    def rest_ike_phase1_config(self):
#        if self.ike_phase1_config is not None:
#            return self.ike_phase1_config
#        field_info = self.__class__.__fields__["ike_phase1_config"]
#        try:
#            self.ike_phase1_config =  self.link_based_request(field_info.alias, "GET", return_type="P1Config")
#        except LinkNameException as e:
#            self.ike_phase1_config =  self.link_based_request("ike_phase1_config", "GET", return_type="P1Config")
#        return self.ike_phase1_config
#
#    @rest_ike_phase1_config.setter
#    def rest_ike_phase1_config(self, value):
#        self.ike_phase1_config = value

#    @property
#    def rest_ike_phase2_config(self):
#        if self.ike_phase2_config is not None:
#            return self.ike_phase2_config
#        field_info = self.__class__.__fields__["ike_phase2_config"]
#        try:
#            self.ike_phase2_config =  self.link_based_request(field_info.alias, "GET", return_type="P2Config")
#        except LinkNameException as e:
#            self.ike_phase2_config =  self.link_based_request("ike_phase2_config", "GET", return_type="P2Config")
#        return self.ike_phase2_config
#
#    @rest_ike_phase2_config.setter
#    def rest_ike_phase2_config(self, value):
#        self.ike_phase2_config = value

#    @property
#    def rest_ip_sec_range_name(self):
#        if self.ip_sec_range_name is not None:
#            return self.ip_sec_range_name
#        field_info = self.__class__.__fields__["ip_sec_range_name"]
#        try:
#            self.ip_sec_range_name =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.ip_sec_range_name =  self.link_based_request("ip_sec_range_name", "GET", return_type="str")
#        return self.ip_sec_range_name
#
#    @rest_ip_sec_range_name.setter
#    def rest_ip_sec_range_name(self, value):
#        self.ip_sec_range_name = value

#    @property
#    def rest_multi_p2_over_p1(self):
#        if self.multi_p2_over_p1 is not None:
#            return self.multi_p2_over_p1
#        field_info = self.__class__.__fields__["multi_p2_over_p1"]
#        try:
#            self.multi_p2_over_p1 =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.multi_p2_over_p1 =  self.link_based_request("multi_p2_over_p1", "GET", return_type="bool")
#        return self.multi_p2_over_p1
#
#    @rest_multi_p2_over_p1.setter
#    def rest_multi_p2_over_p1(self, value):
#        self.multi_p2_over_p1 = value

#    @property
#    def rest_protected_sub_config(self):
#        if self.protected_sub_config is not None:
#            return self.protected_sub_config
#        field_info = self.__class__.__fields__["protected_sub_config"]
#        try:
#            self.protected_sub_config =  self.link_based_request(field_info.alias, "GET", return_type="ProtectedSubnetConfig")
#        except LinkNameException as e:
#            self.protected_sub_config =  self.link_based_request("protected_sub_config", "GET", return_type="ProtectedSubnetConfig")
#        return self.protected_sub_config
#
#    @rest_protected_sub_config.setter
#    def rest_protected_sub_config(self, value):
#        self.protected_sub_config = value

#    @property
#    def rest_public_peer(self):
#        if self.public_peer is not None:
#            return self.public_peer
#        field_info = self.__class__.__fields__["public_peer"]
#        try:
#            self.public_peer =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.public_peer =  self.link_based_request("public_peer", "GET", return_type="str")
#        return self.public_peer
#
#    @rest_public_peer.setter
#    def rest_public_peer(self, value):
#        self.public_peer = value

#    @property
#    def rest_public_peer_increment(self):
#        if self.public_peer_increment is not None:
#            return self.public_peer_increment
#        field_info = self.__class__.__fields__["public_peer_increment"]
#        try:
#            self.public_peer_increment =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.public_peer_increment =  self.link_based_request("public_peer_increment", "GET", return_type="str")
#        return self.public_peer_increment
#
#    @rest_public_peer_increment.setter
#    def rest_public_peer_increment(self, value):
#        self.public_peer_increment = value

#    @property
#    def rest_remote_access(self):
#        if self.remote_access is not None:
#            return self.remote_access
#        field_info = self.__class__.__fields__["remote_access"]
#        try:
#            self.remote_access =  self.link_based_request(field_info.alias, "GET", return_type="RemoteAccess")
#        except LinkNameException as e:
#            self.remote_access =  self.link_based_request("remote_access", "GET", return_type="RemoteAccess")
#        return self.remote_access
#
#    @rest_remote_access.setter
#    def rest_remote_access(self, value):
#        self.remote_access = value

#    @property
#    def rest_test_scenario(self):
#        if self.test_scenario is not None:
#            return self.test_scenario
#        field_info = self.__class__.__fields__["test_scenario"]
#        try:
#            self.test_scenario =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.test_scenario =  self.link_based_request("test_scenario", "GET", return_type="str")
#        return self.test_scenario
#
#    @rest_test_scenario.setter
#    def rest_test_scenario(self, value):
#        self.test_scenario = value

#    @property
#    def rest_timers(self):
#        if self.timers is not None:
#            return self.timers
#        field_info = self.__class__.__fields__["timers"]
#        try:
#            self.timers =  self.link_based_request(field_info.alias, "GET", return_type="Timers")
#        except LinkNameException as e:
#            self.timers =  self.link_based_request("timers", "GET", return_type="Timers")
#        return self.timers
#
#    @rest_timers.setter
#    def rest_timers(self, value):
#        self.timers = value

#    @property
#    def rest_tunnel_count_per_outer_ip(self):
#        if self.tunnel_count_per_outer_ip is not None:
#            return self.tunnel_count_per_outer_ip
#        field_info = self.__class__.__fields__["tunnel_count_per_outer_ip"]
#        try:
#            self.tunnel_count_per_outer_ip =  self.link_based_request(field_info.alias, "GET", return_type="int")
#        except LinkNameException as e:
#            self.tunnel_count_per_outer_ip =  self.link_based_request("tunnel_count_per_outer_ip", "GET", return_type="int")
#        return self.tunnel_count_per_outer_ip
#
#    @rest_tunnel_count_per_outer_ip.setter
#    def rest_tunnel_count_per_outer_ip(self, value):
#        self.tunnel_count_per_outer_ip = value

#    @property
#    def rest_id(self):
#        if self.id is not None:
#            return self.id
#        field_info = self.__class__.__fields__["id"]
#        try:
#            self.id =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.id =  self.link_based_request("id", "GET", return_type="str")
#        return self.id
#
#    @rest_id.setter
#    def rest_id(self, value):
#        self.id = value



    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IPSecRange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_auth_settings
        if self.var_auth_settings:
            _dict['AuthSettings'] = self.var_auth_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ike_phase1_config
        if self.ike_phase1_config:
            _dict['IKEPhase1Config'] = self.ike_phase1_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ike_phase2_config
        if self.ike_phase2_config:
            _dict['IKEPhase2Config'] = self.ike_phase2_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of protected_sub_config
        if self.protected_sub_config:
            _dict['ProtectedSubConfig'] = self.protected_sub_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote_access
        if self.remote_access:
            _dict['RemoteAccess'] = self.remote_access.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timers
        if self.timers:
            _dict['Timers'] = self.timers.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IPSecRange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            _obj = cls.model_validate(obj)
#            _obj.api_client = client
            return _obj

        _obj = cls.model_validate({
            "AuthSettings": AuthenticationSettings.from_dict(obj["AuthSettings"]) if obj.get("AuthSettings") is not None else None,
                        "IKEPhase1Config": P1Config.from_dict(obj["IKEPhase1Config"]) if obj.get("IKEPhase1Config") is not None else None,
                        "IKEPhase2Config": P2Config.from_dict(obj["IKEPhase2Config"]) if obj.get("IKEPhase2Config") is not None else None,
                        "IPSecRangeName": obj.get("IPSecRangeName"),
                        "MultiP2OverP1": obj.get("MultiP2OverP1"),
                        "ProtectedSubConfig": ProtectedSubnetConfig.from_dict(obj["ProtectedSubConfig"]) if obj.get("ProtectedSubConfig") is not None else None,
                        "PublicPeer": obj.get("PublicPeer"),
                        "PublicPeerIncrement": obj.get("PublicPeerIncrement"),
                        "RemoteAccess": RemoteAccess.from_dict(obj["RemoteAccess"]) if obj.get("RemoteAccess") is not None else None,
                        "TestScenario": obj.get("TestScenario"),
                        "Timers": Timers.from_dict(obj["Timers"]) if obj.get("Timers") is not None else None,
                        "TunnelCountPerOuterIP": obj.get("TunnelCountPerOuterIP"),
                        "id": obj.get("id")
            ,
            "links": obj.get("links")
        })
#        _obj.api_client = client
        return _obj

#    def update(self):
#        self.link_request("self", "PUT", body=self)
#
#   def link_based_request(self, link_name, method, return_type = None, body = None):
#        if self.links == None:
#           raise Exception("You must allow links to be present to use automatic retrieval functions.")
#        if link_name == 'self':
#            self_links = [link for link in self.links if link.rel == link_name]
#        else:
#            self_links = [link for link in self.links if link.rel == "child" and link.name == link_name]
#        if len(self_links) == 0:
#           raise LinkNameException(f"Missing {link_name} link.")
#        self_link = self_links[0]
#        
#        _host = None
#
#        _collection_formats: Dict[str, str] = {
#        }#
#
#        _path_params: Dict[str, str] = {}
#        _query_params: List[Tuple[str, str]] = []
#        _header_params: Dict[str, Optional[str]] = {}
#        _form_params: List[Tuple[str, str]] = []
#        _files: Dict[str, Union[str, bytes]] = {}
#        _body_params: Optional[bytes] = None
#        if body:
#            _body_params = body.to_json().encode('utf-8')
#
#        # set the HTTP header `Accept`
#        if 'Accept' not in _header_params:
#            _header_params['Accept'] = self.api_client.select_header_accept(
#                [
#                    'application/json'
#                ]
#            )
#        if 'Content-Type' not in _header_params:
#            _header_params['Content-Type'] = self.api_client.select_header_content_type(
#                [
#                    'application/json'
#                ]
#            )
#        _auth_settings: List[str] = [
#            'OAuth2',
#        ]
#        _param = self.api_client.param_serialize(
#            method=method,
#           resource_path=self_link.href,
#            path_params=_path_params,
#           query_params=_query_params,
#           body=_body_params,
#            post_params=_form_params,
#            files=_files,
#            auth_settings=_auth_settings,
#            collection_formats=_collection_formats,
#            _host=_host
#        )
#        response_data = self.api_client.call_api(
#            *_param
#        )
#        response_data.read()
#        response_types = {
#            '200': return_type,
#            '500': 'ErrorResponse'
#        }
#        return self.api_client.response_deserialize(response_data, response_types).data
    


