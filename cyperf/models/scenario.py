# coding: utf-8

"""
    CyPerf Application API

    CyPerf REST API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cyperf.models.connection import Connection
from cyperf.models.endpoint import Endpoint
from cyperf.models.http_profile import HTTPProfile
from cyperf.models.ip_preference import IpPreference
from cyperf.models.network_mapping import NetworkMapping
from cyperf.models.params import Params
from typing import Optional, Set, Union, GenericAlias, get_args
from typing_extensions import Self
from pydantic import Field
#from cyperf.models import LinkNameException

if "Scenario" != "APILink":
    from cyperf.models.api_link import APILink

class Scenario(BaseModel):
    """
    Scenario
    """ # noqa: E501
    action_timeout: Optional[StrictInt] = Field(default=None, description="The action timeout value of the Scenario.", alias="ActionTimeout")
    active: Optional[StrictBool] = Field(default=None, description="Indicates whether the scenario is enabled or not.", alias="Active")
    client_http_profile: Optional[HTTPProfile] = Field(default=None, description="The client HTTP profile used in the Scenario.", alias="ClientHTTPProfile")
    connections: Optional[List[Connection]] = Field(default=None, alias="Connections")
    connections_max_transactions: Optional[StrictInt] = Field(default=None, description="The maximum number of transactions for all scenario connections.", alias="ConnectionsMaxTransactions")
    description: Optional[StrictStr] = Field(default=None, description="The description of the Scenario.", alias="Description")
    destination_hostname: Optional[StrictStr] = Field(default=None, alias="DestinationHostname")
    dnn_id: Optional[StrictStr] = Field(default=None, alias="DnnId")
    end_point_id: Optional[StrictInt] = Field(default=None, description="The endpoint ID of the Scenario.", alias="EndPointID")
    endpoints: Optional[List[Endpoint]] = Field(default=None, alias="Endpoints")
    external_resource_url: Optional[StrictStr] = Field(default=None, description="The external resource URL of the Scenario.", alias="ExternalResourceURL")
    index: Optional[StrictInt] = Field(default=None, description="The index of the scenario.", alias="Index")
    inherit_http_profile: Optional[StrictBool] = Field(default=None, alias="InheritHTTPProfile")
    ip_preference: Optional[IpPreference] = Field(default=None, description="The Ip Preference. Must be one of: IPV4_ONLY, IPV6_ONLY, BOTH_IPV4_FIRST, BOTH_IPV6_FIRST or IP_PREF_MAX.", alias="IpPreference")
    is_deprecated: Optional[StrictBool] = Field(default=None, description="A value that indicates if the action is deprecated.", alias="IsDeprecated")
    iteration_count: Optional[StrictInt] = Field(default=None, description="The iteration counter of the Scenario.", alias="IterationCount")
    max_active_limit: Optional[StrictInt] = Field(default=None, description="The maximum active limit of the Scenario.", alias="MaxActiveLimit")
    name: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="Name")
    network_mapping: Optional[NetworkMapping] = Field(default=None, alias="NetworkMapping")
    params: Optional[List[Params]] = Field(default=None, alias="Params")
    protocol_id: Optional[StrictStr] = Field(default=None, description="The protocol ID of the Scenario.", alias="ProtocolID")
    qos_flow_id: Optional[StrictStr] = Field(default=None, alias="QosFlowId")
    readonly_max_trans: Optional[StrictBool] = Field(default=None, description="If true, ConnectionsMaxTransactions will be readonly.", alias="ReadonlyMaxTrans")
    server_http_profile: Optional[HTTPProfile] = Field(default=None, description="The server HTTP profile used in the Scenario.", alias="ServerHTTPProfile")
    supports_client_http_profile: Optional[StrictBool] = Field(default=None, description="Indicates if the scenario supports Client HTTP profile.", alias="SupportsClientHTTPProfile")
    supports_http_profiles: Optional[StrictBool] = Field(default=None, description="Indicates if the scenario supports HTTP profiles.", alias="SupportsHTTPProfiles")
    supports_server_http_profile: Optional[StrictBool] = Field(default=None, description="Indicates if the scenario supports Server HTTP profile.", alias="SupportsServerHTTPProfile")
    id: Optional[StrictStr] = None
    links: Optional[List[APILink]] = Field(default=None, description="Links to other properties")
#    api_client: Optional[Any] = None
    __properties: ClassVar[List[str]] = ["ActionTimeout", "Active", "ClientHTTPProfile", "Connections", "ConnectionsMaxTransactions", "Description", "DestinationHostname", "DnnId", "EndPointID", "Endpoints", "ExternalResourceURL", "Index", "InheritHTTPProfile", "IpPreference", "IsDeprecated", "IterationCount", "MaxActiveLimit", "Name", "NetworkMapping", "Params", "ProtocolID", "QosFlowId", "ReadonlyMaxTrans", "ServerHTTPProfile", "SupportsClientHTTPProfile", "SupportsHTTPProfiles", "SupportsServerHTTPProfile", "id"]

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^$|^[^\"\\]+$", value):
            raise ValueError(r"must validate the regular expression /^$|^[^\"\\]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


#    @property
#    def rest_action_timeout(self):
#        if self.action_timeout is not None:
#            return self.action_timeout
#        field_info = self.__class__.__fields__["action_timeout"]
#        try:
#            self.action_timeout =  self.link_based_request(field_info.alias, "GET", return_type="int")
#        except LinkNameException as e:
#            self.action_timeout =  self.link_based_request("action_timeout", "GET", return_type="int")
#        return self.action_timeout
#
#    @rest_action_timeout.setter
#    def rest_action_timeout(self, value):
#        self.action_timeout = value

#    @property
#    def rest_active(self):
#        if self.active is not None:
#            return self.active
#        field_info = self.__class__.__fields__["active"]
#        try:
#            self.active =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.active =  self.link_based_request("active", "GET", return_type="bool")
#        return self.active
#
#    @rest_active.setter
#    def rest_active(self, value):
#        self.active = value

#    @property
#    def rest_client_http_profile(self):
#        if self.client_http_profile is not None:
#            return self.client_http_profile
#        field_info = self.__class__.__fields__["client_http_profile"]
#        try:
#            self.client_http_profile =  self.link_based_request(field_info.alias, "GET", return_type="HTTPProfile")
#        except LinkNameException as e:
#            self.client_http_profile =  self.link_based_request("client_http_profile", "GET", return_type="HTTPProfile")
#        return self.client_http_profile
#
#    @rest_client_http_profile.setter
#    def rest_client_http_profile(self, value):
#        self.client_http_profile = value

#    @property
#    def rest_connections(self):
#        if self.connections is not None:
#            return self.connections
#        field_info = self.__class__.__fields__["connections"]
#        try:
#            self.connections =  self.link_based_request(field_info.alias, "GET", return_type="List[Connection]")
#        except LinkNameException as e:
#            self.connections =  self.link_based_request("connections", "GET", return_type="List[Connection]")
#        return self.connections
#
#    @rest_connections.setter
#    def rest_connections(self, value):
#        self.connections = value

#    @property
#    def rest_connections_max_transactions(self):
#        if self.connections_max_transactions is not None:
#            return self.connections_max_transactions
#        field_info = self.__class__.__fields__["connections_max_transactions"]
#        try:
#            self.connections_max_transactions =  self.link_based_request(field_info.alias, "GET", return_type="int")
#        except LinkNameException as e:
#            self.connections_max_transactions =  self.link_based_request("connections_max_transactions", "GET", return_type="int")
#        return self.connections_max_transactions
#
#    @rest_connections_max_transactions.setter
#    def rest_connections_max_transactions(self, value):
#        self.connections_max_transactions = value

#    @property
#    def rest_description(self):
#        if self.description is not None:
#            return self.description
#        field_info = self.__class__.__fields__["description"]
#        try:
#            self.description =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.description =  self.link_based_request("description", "GET", return_type="str")
#        return self.description
#
#    @rest_description.setter
#    def rest_description(self, value):
#        self.description = value

#    @property
#    def rest_destination_hostname(self):
#        if self.destination_hostname is not None:
#            return self.destination_hostname
#        field_info = self.__class__.__fields__["destination_hostname"]
#        try:
#            self.destination_hostname =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.destination_hostname =  self.link_based_request("destination_hostname", "GET", return_type="str")
#        return self.destination_hostname
#
#    @rest_destination_hostname.setter
#    def rest_destination_hostname(self, value):
#        self.destination_hostname = value

#    @property
#    def rest_dnn_id(self):
#        if self.dnn_id is not None:
#            return self.dnn_id
#        field_info = self.__class__.__fields__["dnn_id"]
#        try:
#            self.dnn_id =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.dnn_id =  self.link_based_request("dnn_id", "GET", return_type="str")
#        return self.dnn_id
#
#    @rest_dnn_id.setter
#    def rest_dnn_id(self, value):
#        self.dnn_id = value

#    @property
#    def rest_end_point_id(self):
#        if self.end_point_id is not None:
#            return self.end_point_id
#        field_info = self.__class__.__fields__["end_point_id"]
#        try:
#            self.end_point_id =  self.link_based_request(field_info.alias, "GET", return_type="int")
#        except LinkNameException as e:
#            self.end_point_id =  self.link_based_request("end_point_id", "GET", return_type="int")
#        return self.end_point_id
#
#    @rest_end_point_id.setter
#    def rest_end_point_id(self, value):
#        self.end_point_id = value

#    @property
#    def rest_endpoints(self):
#        if self.endpoints is not None:
#            return self.endpoints
#        field_info = self.__class__.__fields__["endpoints"]
#        try:
#            self.endpoints =  self.link_based_request(field_info.alias, "GET", return_type="List[Endpoint]")
#        except LinkNameException as e:
#            self.endpoints =  self.link_based_request("endpoints", "GET", return_type="List[Endpoint]")
#        return self.endpoints
#
#    @rest_endpoints.setter
#    def rest_endpoints(self, value):
#        self.endpoints = value

#    @property
#    def rest_external_resource_url(self):
#        if self.external_resource_url is not None:
#            return self.external_resource_url
#        field_info = self.__class__.__fields__["external_resource_url"]
#        try:
#            self.external_resource_url =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.external_resource_url =  self.link_based_request("external_resource_url", "GET", return_type="str")
#        return self.external_resource_url
#
#    @rest_external_resource_url.setter
#    def rest_external_resource_url(self, value):
#        self.external_resource_url = value

#    @property
#    def rest_index(self):
#        if self.index is not None:
#            return self.index
#        field_info = self.__class__.__fields__["index"]
#        try:
#            self.index =  self.link_based_request(field_info.alias, "GET", return_type="int")
#        except LinkNameException as e:
#            self.index =  self.link_based_request("index", "GET", return_type="int")
#        return self.index
#
#    @rest_index.setter
#    def rest_index(self, value):
#        self.index = value

#    @property
#    def rest_inherit_http_profile(self):
#        if self.inherit_http_profile is not None:
#            return self.inherit_http_profile
#        field_info = self.__class__.__fields__["inherit_http_profile"]
#        try:
#            self.inherit_http_profile =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.inherit_http_profile =  self.link_based_request("inherit_http_profile", "GET", return_type="bool")
#        return self.inherit_http_profile
#
#    @rest_inherit_http_profile.setter
#    def rest_inherit_http_profile(self, value):
#        self.inherit_http_profile = value

#    @property
#    def rest_ip_preference(self):
#        if self.ip_preference is not None:
#            return self.ip_preference
#        field_info = self.__class__.__fields__["ip_preference"]
#        try:
#            self.ip_preference =  self.link_based_request(field_info.alias, "GET", return_type="IpPreference")
#        except LinkNameException as e:
#            self.ip_preference =  self.link_based_request("ip_preference", "GET", return_type="IpPreference")
#        return self.ip_preference
#
#    @rest_ip_preference.setter
#    def rest_ip_preference(self, value):
#        self.ip_preference = value

#    @property
#    def rest_is_deprecated(self):
#        if self.is_deprecated is not None:
#            return self.is_deprecated
#        field_info = self.__class__.__fields__["is_deprecated"]
#        try:
#            self.is_deprecated =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.is_deprecated =  self.link_based_request("is_deprecated", "GET", return_type="bool")
#        return self.is_deprecated
#
#    @rest_is_deprecated.setter
#    def rest_is_deprecated(self, value):
#        self.is_deprecated = value

#    @property
#    def rest_iteration_count(self):
#        if self.iteration_count is not None:
#            return self.iteration_count
#        field_info = self.__class__.__fields__["iteration_count"]
#        try:
#            self.iteration_count =  self.link_based_request(field_info.alias, "GET", return_type="int")
#        except LinkNameException as e:
#            self.iteration_count =  self.link_based_request("iteration_count", "GET", return_type="int")
#        return self.iteration_count
#
#    @rest_iteration_count.setter
#    def rest_iteration_count(self, value):
#        self.iteration_count = value

#    @property
#    def rest_max_active_limit(self):
#        if self.max_active_limit is not None:
#            return self.max_active_limit
#        field_info = self.__class__.__fields__["max_active_limit"]
#        try:
#            self.max_active_limit =  self.link_based_request(field_info.alias, "GET", return_type="int")
#        except LinkNameException as e:
#            self.max_active_limit =  self.link_based_request("max_active_limit", "GET", return_type="int")
#        return self.max_active_limit
#
#    @rest_max_active_limit.setter
#    def rest_max_active_limit(self, value):
#        self.max_active_limit = value

#    @property
#    def rest_name(self):
#        if self.name is not None:
#            return self.name
#        field_info = self.__class__.__fields__["name"]
#        try:
#            self.name =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.name =  self.link_based_request("name", "GET", return_type="str")
#        return self.name
#
#    @rest_name.setter
#    def rest_name(self, value):
#        self.name = value

#    @property
#    def rest_network_mapping(self):
#        if self.network_mapping is not None:
#            return self.network_mapping
#        field_info = self.__class__.__fields__["network_mapping"]
#        try:
#            self.network_mapping =  self.link_based_request(field_info.alias, "GET", return_type="NetworkMapping")
#        except LinkNameException as e:
#            self.network_mapping =  self.link_based_request("network_mapping", "GET", return_type="NetworkMapping")
#        return self.network_mapping
#
#    @rest_network_mapping.setter
#    def rest_network_mapping(self, value):
#        self.network_mapping = value

#    @property
#    def rest_params(self):
#        if self.params is not None:
#            return self.params
#        field_info = self.__class__.__fields__["params"]
#        try:
#            self.params =  self.link_based_request(field_info.alias, "GET", return_type="List[Params]")
#        except LinkNameException as e:
#            self.params =  self.link_based_request("params", "GET", return_type="List[Params]")
#        return self.params
#
#    @rest_params.setter
#    def rest_params(self, value):
#        self.params = value

#    @property
#    def rest_protocol_id(self):
#        if self.protocol_id is not None:
#            return self.protocol_id
#        field_info = self.__class__.__fields__["protocol_id"]
#        try:
#            self.protocol_id =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.protocol_id =  self.link_based_request("protocol_id", "GET", return_type="str")
#        return self.protocol_id
#
#    @rest_protocol_id.setter
#    def rest_protocol_id(self, value):
#        self.protocol_id = value

#    @property
#    def rest_qos_flow_id(self):
#        if self.qos_flow_id is not None:
#            return self.qos_flow_id
#        field_info = self.__class__.__fields__["qos_flow_id"]
#        try:
#            self.qos_flow_id =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.qos_flow_id =  self.link_based_request("qos_flow_id", "GET", return_type="str")
#        return self.qos_flow_id
#
#    @rest_qos_flow_id.setter
#    def rest_qos_flow_id(self, value):
#        self.qos_flow_id = value

#    @property
#    def rest_readonly_max_trans(self):
#        if self.readonly_max_trans is not None:
#            return self.readonly_max_trans
#        field_info = self.__class__.__fields__["readonly_max_trans"]
#        try:
#            self.readonly_max_trans =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.readonly_max_trans =  self.link_based_request("readonly_max_trans", "GET", return_type="bool")
#        return self.readonly_max_trans
#
#    @rest_readonly_max_trans.setter
#    def rest_readonly_max_trans(self, value):
#        self.readonly_max_trans = value

#    @property
#    def rest_server_http_profile(self):
#        if self.server_http_profile is not None:
#            return self.server_http_profile
#        field_info = self.__class__.__fields__["server_http_profile"]
#        try:
#            self.server_http_profile =  self.link_based_request(field_info.alias, "GET", return_type="HTTPProfile")
#        except LinkNameException as e:
#            self.server_http_profile =  self.link_based_request("server_http_profile", "GET", return_type="HTTPProfile")
#        return self.server_http_profile
#
#    @rest_server_http_profile.setter
#    def rest_server_http_profile(self, value):
#        self.server_http_profile = value

#    @property
#    def rest_supports_client_http_profile(self):
#        if self.supports_client_http_profile is not None:
#            return self.supports_client_http_profile
#        field_info = self.__class__.__fields__["supports_client_http_profile"]
#        try:
#            self.supports_client_http_profile =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.supports_client_http_profile =  self.link_based_request("supports_client_http_profile", "GET", return_type="bool")
#        return self.supports_client_http_profile
#
#    @rest_supports_client_http_profile.setter
#    def rest_supports_client_http_profile(self, value):
#        self.supports_client_http_profile = value

#    @property
#    def rest_supports_http_profiles(self):
#        if self.supports_http_profiles is not None:
#            return self.supports_http_profiles
#        field_info = self.__class__.__fields__["supports_http_profiles"]
#        try:
#            self.supports_http_profiles =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.supports_http_profiles =  self.link_based_request("supports_http_profiles", "GET", return_type="bool")
#        return self.supports_http_profiles
#
#    @rest_supports_http_profiles.setter
#    def rest_supports_http_profiles(self, value):
#        self.supports_http_profiles = value

#    @property
#    def rest_supports_server_http_profile(self):
#        if self.supports_server_http_profile is not None:
#            return self.supports_server_http_profile
#        field_info = self.__class__.__fields__["supports_server_http_profile"]
#        try:
#            self.supports_server_http_profile =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.supports_server_http_profile =  self.link_based_request("supports_server_http_profile", "GET", return_type="bool")
#        return self.supports_server_http_profile
#
#    @rest_supports_server_http_profile.setter
#    def rest_supports_server_http_profile(self, value):
#        self.supports_server_http_profile = value

#    @property
#    def rest_id(self):
#        if self.id is not None:
#            return self.id
#        field_info = self.__class__.__fields__["id"]
#        try:
#            self.id =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.id =  self.link_based_request("id", "GET", return_type="str")
#        return self.id
#
#    @rest_id.setter
#    def rest_id(self, value):
#        self.id = value



    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Scenario from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client_http_profile
        if self.client_http_profile:
            _dict['ClientHTTPProfile'] = self.client_http_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in connections (list)
        _items = []
        if self.connections:
            for _item in self.connections:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Connections'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in endpoints (list)
        _items = []
        if self.endpoints:
            for _item in self.endpoints:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Endpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of network_mapping
        if self.network_mapping:
            _dict['NetworkMapping'] = self.network_mapping.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in params (list)
        _items = []
        if self.params:
            for _item in self.params:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Params'] = _items
        # override the default output from pydantic by calling `to_dict()` of server_http_profile
        if self.server_http_profile:
            _dict['ServerHTTPProfile'] = self.server_http_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Scenario from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            _obj = cls.model_validate(obj)
#            _obj.api_client = client
            return _obj

        _obj = cls.model_validate({
            "ActionTimeout": obj.get("ActionTimeout"),
                        "Active": obj.get("Active"),
                        "ClientHTTPProfile": HTTPProfile.from_dict(obj["ClientHTTPProfile"]) if obj.get("ClientHTTPProfile") is not None else None,
                        "Connections": [Connection.from_dict(_item) for _item in obj["Connections"]] if obj.get("Connections") is not None else None,
                        "ConnectionsMaxTransactions": obj.get("ConnectionsMaxTransactions"),
                        "Description": obj.get("Description"),
                        "DestinationHostname": obj.get("DestinationHostname"),
                        "DnnId": obj.get("DnnId"),
                        "EndPointID": obj.get("EndPointID"),
                        "Endpoints": [Endpoint.from_dict(_item) for _item in obj["Endpoints"]] if obj.get("Endpoints") is not None else None,
                        "ExternalResourceURL": obj.get("ExternalResourceURL"),
                        "Index": obj.get("Index"),
                        "InheritHTTPProfile": obj.get("InheritHTTPProfile"),
                        "IpPreference": obj.get("IpPreference"),
                        "IsDeprecated": obj.get("IsDeprecated"),
                        "IterationCount": obj.get("IterationCount"),
                        "MaxActiveLimit": obj.get("MaxActiveLimit"),
                        "Name": obj.get("Name"),
                        "NetworkMapping": NetworkMapping.from_dict(obj["NetworkMapping"]) if obj.get("NetworkMapping") is not None else None,
                        "Params": [Params.from_dict(_item) for _item in obj["Params"]] if obj.get("Params") is not None else None,
                        "ProtocolID": obj.get("ProtocolID"),
                        "QosFlowId": obj.get("QosFlowId"),
                        "ReadonlyMaxTrans": obj.get("ReadonlyMaxTrans"),
                        "ServerHTTPProfile": HTTPProfile.from_dict(obj["ServerHTTPProfile"]) if obj.get("ServerHTTPProfile") is not None else None,
                        "SupportsClientHTTPProfile": obj.get("SupportsClientHTTPProfile"),
                        "SupportsHTTPProfiles": obj.get("SupportsHTTPProfiles"),
                        "SupportsServerHTTPProfile": obj.get("SupportsServerHTTPProfile"),
                        "id": obj.get("id")
            ,
            "links": obj.get("links")
        })
#        _obj.api_client = client
        return _obj

#    def update(self):
#        self.link_request("self", "PUT", body=self)
#
#   def link_based_request(self, link_name, method, return_type = None, body = None):
#        if self.links == None:
#           raise Exception("You must allow links to be present to use automatic retrieval functions.")
#        if link_name == 'self':
#            self_links = [link for link in self.links if link.rel == link_name]
#        else:
#            self_links = [link for link in self.links if link.rel == "child" and link.name == link_name]
#        if len(self_links) == 0:
#           raise LinkNameException(f"Missing {link_name} link.")
#        self_link = self_links[0]
#        
#        _host = None
#
#        _collection_formats: Dict[str, str] = {
#        }#
#
#        _path_params: Dict[str, str] = {}
#        _query_params: List[Tuple[str, str]] = []
#        _header_params: Dict[str, Optional[str]] = {}
#        _form_params: List[Tuple[str, str]] = []
#        _files: Dict[str, Union[str, bytes]] = {}
#        _body_params: Optional[bytes] = None
#        if body:
#            _body_params = body.to_json().encode('utf-8')
#
#        # set the HTTP header `Accept`
#        if 'Accept' not in _header_params:
#            _header_params['Accept'] = self.api_client.select_header_accept(
#                [
#                    'application/json'
#                ]
#            )
#        if 'Content-Type' not in _header_params:
#            _header_params['Content-Type'] = self.api_client.select_header_content_type(
#                [
#                    'application/json'
#                ]
#            )
#        _auth_settings: List[str] = [
#            'OAuth2',
#        ]
#        _param = self.api_client.param_serialize(
#            method=method,
#           resource_path=self_link.href,
#            path_params=_path_params,
#           query_params=_query_params,
#           body=_body_params,
#            post_params=_form_params,
#            files=_files,
#            auth_settings=_auth_settings,
#            collection_formats=_collection_formats,
#            _host=_host
#        )
#        response_data = self.api_client.call_api(
#            *_param
#        )
#        response_data.read()
#        response_types = {
#            '200': return_type,
#            '500': 'ErrorResponse'
#        }
#        return self.api_client.response_deserialize(response_data, response_types).data
    


