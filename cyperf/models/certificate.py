# coding: utf-8

"""
    CyPerf Application API

    CyPerf REST API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set, Union, GenericAlias, get_args
from typing_extensions import Self
from pydantic import Field
#from cyperf.models import LinkNameException

if "Certificate" != "APILink":
    from cyperf.models.api_link import APILink

class Certificate(BaseModel):
    """
    Certificate
    """ # noqa: E501
    auto: Optional[StrictBool] = None
    dns_names: Optional[List[StrictStr]] = Field(default=None, alias="dnsNames")
    ip_addresses: Optional[List[StrictStr]] = Field(default=None, alias="ipAddresses")
    issuer: Optional[StrictStr] = None
    not_after: Optional[StrictStr] = Field(default=None, alias="notAfter")
    not_before: Optional[StrictStr] = Field(default=None, alias="notBefore")
    valid_for: Optional[StrictInt] = Field(default=None, alias="validFor")
    links: Optional[List[APILink]] = Field(default=None, description="Links to other properties")
#    api_client: Optional[Any] = None
    __properties: ClassVar[List[str]] = ["auto", "dnsNames", "ipAddresses", "issuer", "notAfter", "notBefore", "validFor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


#    @property
#    def rest_auto(self):
#        if self.auto is not None:
#            return self.auto
#        field_info = self.__class__.__fields__["auto"]
#        try:
#            self.auto =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.auto =  self.link_based_request("auto", "GET", return_type="bool")
#        return self.auto
#
#    @rest_auto.setter
#    def rest_auto(self, value):
#        self.auto = value

#    @property
#    def rest_dns_names(self):
#        if self.dns_names is not None:
#            return self.dns_names
#        field_info = self.__class__.__fields__["dns_names"]
#        try:
#            self.dns_names =  self.link_based_request(field_info.alias, "GET", return_type="List[str]")
#        except LinkNameException as e:
#            self.dns_names =  self.link_based_request("dns_names", "GET", return_type="List[str]")
#        return self.dns_names
#
#    @rest_dns_names.setter
#    def rest_dns_names(self, value):
#        self.dns_names = value

#    @property
#    def rest_ip_addresses(self):
#        if self.ip_addresses is not None:
#            return self.ip_addresses
#        field_info = self.__class__.__fields__["ip_addresses"]
#        try:
#            self.ip_addresses =  self.link_based_request(field_info.alias, "GET", return_type="List[str]")
#        except LinkNameException as e:
#            self.ip_addresses =  self.link_based_request("ip_addresses", "GET", return_type="List[str]")
#        return self.ip_addresses
#
#    @rest_ip_addresses.setter
#    def rest_ip_addresses(self, value):
#        self.ip_addresses = value

#    @property
#    def rest_issuer(self):
#        if self.issuer is not None:
#            return self.issuer
#        field_info = self.__class__.__fields__["issuer"]
#        try:
#            self.issuer =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.issuer =  self.link_based_request("issuer", "GET", return_type="str")
#        return self.issuer
#
#    @rest_issuer.setter
#    def rest_issuer(self, value):
#        self.issuer = value

#    @property
#    def rest_not_after(self):
#        if self.not_after is not None:
#            return self.not_after
#        field_info = self.__class__.__fields__["not_after"]
#        try:
#            self.not_after =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.not_after =  self.link_based_request("not_after", "GET", return_type="str")
#        return self.not_after
#
#    @rest_not_after.setter
#    def rest_not_after(self, value):
#        self.not_after = value

#    @property
#    def rest_not_before(self):
#        if self.not_before is not None:
#            return self.not_before
#        field_info = self.__class__.__fields__["not_before"]
#        try:
#            self.not_before =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.not_before =  self.link_based_request("not_before", "GET", return_type="str")
#        return self.not_before
#
#    @rest_not_before.setter
#    def rest_not_before(self, value):
#        self.not_before = value

#    @property
#    def rest_valid_for(self):
#        if self.valid_for is not None:
#            return self.valid_for
#        field_info = self.__class__.__fields__["valid_for"]
#        try:
#            self.valid_for =  self.link_based_request(field_info.alias, "GET", return_type="int")
#        except LinkNameException as e:
#            self.valid_for =  self.link_based_request("valid_for", "GET", return_type="int")
#        return self.valid_for
#
#    @rest_valid_for.setter
#    def rest_valid_for(self, value):
#        self.valid_for = value



    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Certificate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "issuer",
            "not_after",
            "not_before",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Certificate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            _obj = cls.model_validate(obj)
#            _obj.api_client = client
            return _obj

        _obj = cls.model_validate({
            "auto": obj.get("auto"),
                        "dnsNames": obj.get("dnsNames"),
                        "ipAddresses": obj.get("ipAddresses"),
                        "issuer": obj.get("issuer"),
                        "notAfter": obj.get("notAfter"),
                        "notBefore": obj.get("notBefore"),
                        "validFor": obj.get("validFor")
            ,
            "links": obj.get("links")
        })
#        _obj.api_client = client
        return _obj

#    def update(self):
#        self.link_request("self", "PUT", body=self)
#
#   def link_based_request(self, link_name, method, return_type = None, body = None):
#        if self.links == None:
#           raise Exception("You must allow links to be present to use automatic retrieval functions.")
#        if link_name == 'self':
#            self_links = [link for link in self.links if link.rel == link_name]
#        else:
#            self_links = [link for link in self.links if link.rel == "child" and link.name == link_name]
#        if len(self_links) == 0:
#           raise LinkNameException(f"Missing {link_name} link.")
#        self_link = self_links[0]
#        
#        _host = None
#
#        _collection_formats: Dict[str, str] = {
#        }#
#
#        _path_params: Dict[str, str] = {}
#        _query_params: List[Tuple[str, str]] = []
#        _header_params: Dict[str, Optional[str]] = {}
#        _form_params: List[Tuple[str, str]] = []
#        _files: Dict[str, Union[str, bytes]] = {}
#        _body_params: Optional[bytes] = None
#        if body:
#            _body_params = body.to_json().encode('utf-8')
#
#        # set the HTTP header `Accept`
#        if 'Accept' not in _header_params:
#            _header_params['Accept'] = self.api_client.select_header_accept(
#                [
#                    'application/json'
#                ]
#            )
#        if 'Content-Type' not in _header_params:
#            _header_params['Content-Type'] = self.api_client.select_header_content_type(
#                [
#                    'application/json'
#                ]
#            )
#        _auth_settings: List[str] = [
#            'OAuth2',
#        ]
#        _param = self.api_client.param_serialize(
#            method=method,
#           resource_path=self_link.href,
#            path_params=_path_params,
#           query_params=_query_params,
#           body=_body_params,
#            post_params=_form_params,
#            files=_files,
#            auth_settings=_auth_settings,
#            collection_formats=_collection_formats,
#            _host=_host
#        )
#        response_data = self.api_client.call_api(
#            *_param
#        )
#        response_data.read()
#        response_types = {
#            '200': return_type,
#            '500': 'ErrorResponse'
#        }
#        return self.api_client.response_deserialize(response_data, response_types).data
    


