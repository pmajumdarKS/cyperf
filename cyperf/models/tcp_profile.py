# coding: utf-8

"""
    CyPerf Application API

    CyPerf REST API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set, Union, GenericAlias, get_args
from typing_extensions import Self
from pydantic import Field
#from cyperf.models import LinkNameException

if "TcpProfile" != "APILink":
    from cyperf.models.api_link import APILink

class TcpProfile(BaseModel):
    """
    TcpProfile
    """ # noqa: E501
    close_with_reset: Optional[StrictBool] = Field(default=None, alias="CloseWithReset")
    defer_accept: Optional[StrictBool] = Field(default=None, alias="DeferAccept")
    ecn_enabled: Optional[StrictBool] = Field(default=None, alias="EcnEnabled")
    max_rto: StrictInt = Field(alias="MaxRto")
    max_src_port: StrictInt = Field(alias="MaxSrcPort")
    min_rto: StrictInt = Field(alias="MinRto")
    min_src_port: StrictInt = Field(alias="MinSrcPort")
    ping_pong: Optional[StrictBool] = Field(default=None, alias="PingPong")
    pmtu_disc_disabled: Optional[StrictBool] = Field(default=None, alias="PmtuDiscDisabled")
    recycle_tw_enabled: Optional[StrictBool] = Field(default=None, alias="RecycleTwEnabled")
    reordering: Optional[StrictBool] = Field(default=None, alias="Reordering")
    reuse_tw_enabled: Optional[StrictBool] = Field(default=None, alias="ReuseTwEnabled")
    rx_buffer: StrictInt = Field(alias="RxBuffer")
    sack_enabled: Optional[StrictBool] = Field(default=None, alias="SackEnabled")
    sock_group: Optional[StrictStr] = Field(default=None, alias="SockGroup")
    timestamp_hdr_enabled: Optional[StrictBool] = Field(default=None, alias="TimestampHdrEnabled")
    tx_buffer: StrictInt = Field(alias="TxBuffer")
    user_mss: Optional[StrictInt] = Field(default=None, alias="UserMss")
    wscale_enabled: Optional[StrictBool] = Field(default=None, alias="WscaleEnabled")
    links: Optional[List[APILink]] = Field(default=None, description="Links to other properties")
#    api_client: Optional[Any] = None
    __properties: ClassVar[List[str]] = ["CloseWithReset", "DeferAccept", "EcnEnabled", "MaxRto", "MaxSrcPort", "MinRto", "MinSrcPort", "PingPong", "PmtuDiscDisabled", "RecycleTwEnabled", "Reordering", "ReuseTwEnabled", "RxBuffer", "SackEnabled", "SockGroup", "TimestampHdrEnabled", "TxBuffer", "UserMss", "WscaleEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


#    @property
#    def rest_close_with_reset(self):
#        if self.close_with_reset is not None:
#            return self.close_with_reset
#        field_info = self.__class__.__fields__["close_with_reset"]
#        try:
#            self.close_with_reset =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.close_with_reset =  self.link_based_request("close_with_reset", "GET", return_type="bool")
#        return self.close_with_reset
#
#    @rest_close_with_reset.setter
#    def rest_close_with_reset(self, value):
#        self.close_with_reset = value

#    @property
#    def rest_defer_accept(self):
#        if self.defer_accept is not None:
#            return self.defer_accept
#        field_info = self.__class__.__fields__["defer_accept"]
#        try:
#            self.defer_accept =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.defer_accept =  self.link_based_request("defer_accept", "GET", return_type="bool")
#        return self.defer_accept
#
#    @rest_defer_accept.setter
#    def rest_defer_accept(self, value):
#        self.defer_accept = value

#    @property
#    def rest_ecn_enabled(self):
#        if self.ecn_enabled is not None:
#            return self.ecn_enabled
#        field_info = self.__class__.__fields__["ecn_enabled"]
#        try:
#            self.ecn_enabled =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.ecn_enabled =  self.link_based_request("ecn_enabled", "GET", return_type="bool")
#        return self.ecn_enabled
#
#    @rest_ecn_enabled.setter
#    def rest_ecn_enabled(self, value):
#        self.ecn_enabled = value

#    @property
#    def rest_max_rto(self):
#        if self.max_rto is not None:
#            return self.max_rto
#        field_info = self.__class__.__fields__["max_rto"]
#        try:
#            self.max_rto =  self.link_based_request(field_info.alias, "GET", return_type="int")
#        except LinkNameException as e:
#            self.max_rto =  self.link_based_request("max_rto", "GET", return_type="int")
#        return self.max_rto
#
#    @rest_max_rto.setter
#    def rest_max_rto(self, value):
#        self.max_rto = value

#    @property
#    def rest_max_src_port(self):
#        if self.max_src_port is not None:
#            return self.max_src_port
#        field_info = self.__class__.__fields__["max_src_port"]
#        try:
#            self.max_src_port =  self.link_based_request(field_info.alias, "GET", return_type="int")
#        except LinkNameException as e:
#            self.max_src_port =  self.link_based_request("max_src_port", "GET", return_type="int")
#        return self.max_src_port
#
#    @rest_max_src_port.setter
#    def rest_max_src_port(self, value):
#        self.max_src_port = value

#    @property
#    def rest_min_rto(self):
#        if self.min_rto is not None:
#            return self.min_rto
#        field_info = self.__class__.__fields__["min_rto"]
#        try:
#            self.min_rto =  self.link_based_request(field_info.alias, "GET", return_type="int")
#        except LinkNameException as e:
#            self.min_rto =  self.link_based_request("min_rto", "GET", return_type="int")
#        return self.min_rto
#
#    @rest_min_rto.setter
#    def rest_min_rto(self, value):
#        self.min_rto = value

#    @property
#    def rest_min_src_port(self):
#        if self.min_src_port is not None:
#            return self.min_src_port
#        field_info = self.__class__.__fields__["min_src_port"]
#        try:
#            self.min_src_port =  self.link_based_request(field_info.alias, "GET", return_type="int")
#        except LinkNameException as e:
#            self.min_src_port =  self.link_based_request("min_src_port", "GET", return_type="int")
#        return self.min_src_port
#
#    @rest_min_src_port.setter
#    def rest_min_src_port(self, value):
#        self.min_src_port = value

#    @property
#    def rest_ping_pong(self):
#        if self.ping_pong is not None:
#            return self.ping_pong
#        field_info = self.__class__.__fields__["ping_pong"]
#        try:
#            self.ping_pong =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.ping_pong =  self.link_based_request("ping_pong", "GET", return_type="bool")
#        return self.ping_pong
#
#    @rest_ping_pong.setter
#    def rest_ping_pong(self, value):
#        self.ping_pong = value

#    @property
#    def rest_pmtu_disc_disabled(self):
#        if self.pmtu_disc_disabled is not None:
#            return self.pmtu_disc_disabled
#        field_info = self.__class__.__fields__["pmtu_disc_disabled"]
#        try:
#            self.pmtu_disc_disabled =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.pmtu_disc_disabled =  self.link_based_request("pmtu_disc_disabled", "GET", return_type="bool")
#        return self.pmtu_disc_disabled
#
#    @rest_pmtu_disc_disabled.setter
#    def rest_pmtu_disc_disabled(self, value):
#        self.pmtu_disc_disabled = value

#    @property
#    def rest_recycle_tw_enabled(self):
#        if self.recycle_tw_enabled is not None:
#            return self.recycle_tw_enabled
#        field_info = self.__class__.__fields__["recycle_tw_enabled"]
#        try:
#            self.recycle_tw_enabled =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.recycle_tw_enabled =  self.link_based_request("recycle_tw_enabled", "GET", return_type="bool")
#        return self.recycle_tw_enabled
#
#    @rest_recycle_tw_enabled.setter
#    def rest_recycle_tw_enabled(self, value):
#        self.recycle_tw_enabled = value

#    @property
#    def rest_reordering(self):
#        if self.reordering is not None:
#            return self.reordering
#        field_info = self.__class__.__fields__["reordering"]
#        try:
#            self.reordering =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.reordering =  self.link_based_request("reordering", "GET", return_type="bool")
#        return self.reordering
#
#    @rest_reordering.setter
#    def rest_reordering(self, value):
#        self.reordering = value

#    @property
#    def rest_reuse_tw_enabled(self):
#        if self.reuse_tw_enabled is not None:
#            return self.reuse_tw_enabled
#        field_info = self.__class__.__fields__["reuse_tw_enabled"]
#        try:
#            self.reuse_tw_enabled =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.reuse_tw_enabled =  self.link_based_request("reuse_tw_enabled", "GET", return_type="bool")
#        return self.reuse_tw_enabled
#
#    @rest_reuse_tw_enabled.setter
#    def rest_reuse_tw_enabled(self, value):
#        self.reuse_tw_enabled = value

#    @property
#    def rest_rx_buffer(self):
#        if self.rx_buffer is not None:
#            return self.rx_buffer
#        field_info = self.__class__.__fields__["rx_buffer"]
#        try:
#            self.rx_buffer =  self.link_based_request(field_info.alias, "GET", return_type="int")
#        except LinkNameException as e:
#            self.rx_buffer =  self.link_based_request("rx_buffer", "GET", return_type="int")
#        return self.rx_buffer
#
#    @rest_rx_buffer.setter
#    def rest_rx_buffer(self, value):
#        self.rx_buffer = value

#    @property
#    def rest_sack_enabled(self):
#        if self.sack_enabled is not None:
#            return self.sack_enabled
#        field_info = self.__class__.__fields__["sack_enabled"]
#        try:
#            self.sack_enabled =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.sack_enabled =  self.link_based_request("sack_enabled", "GET", return_type="bool")
#        return self.sack_enabled
#
#    @rest_sack_enabled.setter
#    def rest_sack_enabled(self, value):
#        self.sack_enabled = value

#    @property
#    def rest_sock_group(self):
#        if self.sock_group is not None:
#            return self.sock_group
#        field_info = self.__class__.__fields__["sock_group"]
#        try:
#            self.sock_group =  self.link_based_request(field_info.alias, "GET", return_type="str")
#        except LinkNameException as e:
#            self.sock_group =  self.link_based_request("sock_group", "GET", return_type="str")
#        return self.sock_group
#
#    @rest_sock_group.setter
#    def rest_sock_group(self, value):
#        self.sock_group = value

#    @property
#    def rest_timestamp_hdr_enabled(self):
#        if self.timestamp_hdr_enabled is not None:
#            return self.timestamp_hdr_enabled
#        field_info = self.__class__.__fields__["timestamp_hdr_enabled"]
#        try:
#            self.timestamp_hdr_enabled =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.timestamp_hdr_enabled =  self.link_based_request("timestamp_hdr_enabled", "GET", return_type="bool")
#        return self.timestamp_hdr_enabled
#
#    @rest_timestamp_hdr_enabled.setter
#    def rest_timestamp_hdr_enabled(self, value):
#        self.timestamp_hdr_enabled = value

#    @property
#    def rest_tx_buffer(self):
#        if self.tx_buffer is not None:
#            return self.tx_buffer
#        field_info = self.__class__.__fields__["tx_buffer"]
#        try:
#            self.tx_buffer =  self.link_based_request(field_info.alias, "GET", return_type="int")
#        except LinkNameException as e:
#            self.tx_buffer =  self.link_based_request("tx_buffer", "GET", return_type="int")
#        return self.tx_buffer
#
#    @rest_tx_buffer.setter
#    def rest_tx_buffer(self, value):
#        self.tx_buffer = value

#    @property
#    def rest_user_mss(self):
#        if self.user_mss is not None:
#            return self.user_mss
#        field_info = self.__class__.__fields__["user_mss"]
#        try:
#            self.user_mss =  self.link_based_request(field_info.alias, "GET", return_type="int")
#        except LinkNameException as e:
#            self.user_mss =  self.link_based_request("user_mss", "GET", return_type="int")
#        return self.user_mss
#
#    @rest_user_mss.setter
#    def rest_user_mss(self, value):
#        self.user_mss = value

#    @property
#    def rest_wscale_enabled(self):
#        if self.wscale_enabled is not None:
#            return self.wscale_enabled
#        field_info = self.__class__.__fields__["wscale_enabled"]
#        try:
#            self.wscale_enabled =  self.link_based_request(field_info.alias, "GET", return_type="bool")
#        except LinkNameException as e:
#            self.wscale_enabled =  self.link_based_request("wscale_enabled", "GET", return_type="bool")
#        return self.wscale_enabled
#
#    @rest_wscale_enabled.setter
#    def rest_wscale_enabled(self, value):
#        self.wscale_enabled = value



    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TcpProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TcpProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            _obj = cls.model_validate(obj)
#            _obj.api_client = client
            return _obj

        _obj = cls.model_validate({
            "CloseWithReset": obj.get("CloseWithReset"),
                        "DeferAccept": obj.get("DeferAccept"),
                        "EcnEnabled": obj.get("EcnEnabled"),
                        "MaxRto": obj.get("MaxRto"),
                        "MaxSrcPort": obj.get("MaxSrcPort"),
                        "MinRto": obj.get("MinRto"),
                        "MinSrcPort": obj.get("MinSrcPort"),
                        "PingPong": obj.get("PingPong"),
                        "PmtuDiscDisabled": obj.get("PmtuDiscDisabled"),
                        "RecycleTwEnabled": obj.get("RecycleTwEnabled"),
                        "Reordering": obj.get("Reordering"),
                        "ReuseTwEnabled": obj.get("ReuseTwEnabled"),
                        "RxBuffer": obj.get("RxBuffer"),
                        "SackEnabled": obj.get("SackEnabled"),
                        "SockGroup": obj.get("SockGroup"),
                        "TimestampHdrEnabled": obj.get("TimestampHdrEnabled"),
                        "TxBuffer": obj.get("TxBuffer"),
                        "UserMss": obj.get("UserMss"),
                        "WscaleEnabled": obj.get("WscaleEnabled")
            ,
            "links": obj.get("links")
        })
#        _obj.api_client = client
        return _obj

#    def update(self):
#        self.link_request("self", "PUT", body=self)
#
#   def link_based_request(self, link_name, method, return_type = None, body = None):
#        if self.links == None:
#           raise Exception("You must allow links to be present to use automatic retrieval functions.")
#        if link_name == 'self':
#            self_links = [link for link in self.links if link.rel == link_name]
#        else:
#            self_links = [link for link in self.links if link.rel == "child" and link.name == link_name]
#        if len(self_links) == 0:
#           raise LinkNameException(f"Missing {link_name} link.")
#        self_link = self_links[0]
#        
#        _host = None
#
#        _collection_formats: Dict[str, str] = {
#        }#
#
#        _path_params: Dict[str, str] = {}
#        _query_params: List[Tuple[str, str]] = []
#        _header_params: Dict[str, Optional[str]] = {}
#        _form_params: List[Tuple[str, str]] = []
#        _files: Dict[str, Union[str, bytes]] = {}
#        _body_params: Optional[bytes] = None
#        if body:
#            _body_params = body.to_json().encode('utf-8')
#
#        # set the HTTP header `Accept`
#        if 'Accept' not in _header_params:
#            _header_params['Accept'] = self.api_client.select_header_accept(
#                [
#                    'application/json'
#                ]
#            )
#        if 'Content-Type' not in _header_params:
#            _header_params['Content-Type'] = self.api_client.select_header_content_type(
#                [
#                    'application/json'
#                ]
#            )
#        _auth_settings: List[str] = [
#            'OAuth2',
#        ]
#        _param = self.api_client.param_serialize(
#            method=method,
#           resource_path=self_link.href,
#            path_params=_path_params,
#           query_params=_query_params,
#           body=_body_params,
#            post_params=_form_params,
#            files=_files,
#            auth_settings=_auth_settings,
#            collection_formats=_collection_formats,
#            _host=_host
#        )
#        response_data = self.api_client.call_api(
#            *_param
#        )
#        response_data.read()
#        response_types = {
#            '200': return_type,
#            '500': 'ErrorResponse'
#        }
#        return self.api_client.response_deserialize(response_data, response_types).data
    


