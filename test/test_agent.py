# coding: utf-8

"""
    CyPerf Application API

    CyPerf REST API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.agent import Agent

class TestAgent(unittest.TestCase):
    """Agent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Agent:
        """Test Agent
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Agent`
        """
        model = Agent()
        if include_optional:
            return Agent(
                agent_tags = [
                    ''
                    ],
                ip = '',
                interfaces = [
                    openapi_client.models.interface.Interface(
                        gateway = '', 
                        ip = [
                            openapi_client.models.ip_mask.IpMask(
                                net_mask = 56, )
                            ], 
                        mtu = 56, 
                        mac = '', 
                        name = '', )
                    ],
                last_update = 56,
                reservation_id = '',
                selected_env = openapi_client.models.selected_env.SelectedEnv(
                    session_id = '', 
                    test_interface = [
                        openapi_client.models.interface.Interface(
                            gateway = '', 
                            ip = [
                                openapi_client.models.ip_mask.IpMask(
                                    net_mask = 56, )
                                ], 
                            mtu = 56, 
                            mac = '', 
                            name = '', )
                        ], 
                    token = '', ),
                selection_status = '',
                session_name = '',
                status = '',
                cpu_info = [
                    openapi_client.models.agent_cpu_info.AgentCPUInfo(
                        cpu_core_count = 56, 
                        cpu_freq_mhz = 1.337, 
                        family = '', 
                        model = '', 
                        model_name = '', 
                        vendor_id = '', )
                    ],
                dpdk_enabled = True,
                features = openapi_client.models.agent_features.AgentFeatures(
                    dpdk_usage = '', 
                    update = '', ),
                hostname = '',
                id = '',
                memory_mb = 1.337,
                mgmt_interface = openapi_client.models.interface.Interface(
                    gateway = '', 
                    ip = [
                        openapi_client.models.ip_mask.IpMask(
                            net_mask = 56, )
                        ], 
                    mtu = 56, 
                    mac = '', 
                    name = '', ),
                ntp_info = openapi_client.models.ntp_info.NtpInfo(
                    active_server = '', 
                    servers = [
                        ''
                        ], 
                    status = '', ),
                offline = True,
                owner = '',
                owner_id = '',
                package_version_status = '',
                requires_updating = True,
                system_info = openapi_client.models.system_info.SystemInfo(
                    kernel_version = '', 
                    os_name = '', 
                    port_manager_version = '', 
                    traffic_agent_info = [
                        openapi_client.models.traffic_agent_info.TrafficAgentInfo(
                            type = '', 
                            version = '', )
                        ], )
            )
        else:
            return Agent(
        )
        """

    def testAgent(self):
        """Test Agent"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
