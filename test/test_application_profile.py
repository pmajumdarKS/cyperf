# coding: utf-8

"""
    CyPerf Application API

    CyPerf REST API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cyperf.models.application_profile import ApplicationProfile

class TestApplicationProfile(unittest.TestCase):
    """ApplicationProfile unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApplicationProfile:
        """Test ApplicationProfile
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApplicationProfile`
        """
        model = ApplicationProfile()
        if include_optional:
            return ApplicationProfile(
                active = True,
                id = '',
                traffic_settings = cyperf.models.traffic_settings.TrafficSettings(
                    default_transport_profile = null, ),
                add_applications = [
                    cyperf.models.external_resource_info.ExternalResourceInfo(
                        external_resource_url = '', )
                    ],
                applications = [
                    null
                    ],
                default_network_mapping = cyperf.models.network_mapping.NetworkMapping(
                    client_network_tags = [
                        ''
                        ], 
                    excluded_dut_list = [
                        ''
                        ], 
                    server_network_tags = [
                        ''
                        ], ),
                modify_excluded_dut_recursively = [
                    cyperf.models.update_network_mapping.UpdateNetworkMapping(
                        client_network_tags = [
                            ''
                            ], 
                        excluded_dut_list = [
                            ''
                            ], 
                        select_tags = True, 
                        server_network_tags = [
                            ''
                            ], )
                    ],
                modify_tags_recursively = [
                    cyperf.models.update_network_mapping.UpdateNetworkMapping(
                        client_network_tags = [
                            ''
                            ], 
                        excluded_dut_list = [
                            ''
                            ], 
                        select_tags = True, 
                        server_network_tags = [
                            ''
                            ], )
                    ],
                name = '',
                objectives_and_timeline = cyperf.models.objectives_and_timeline.ObjectivesAndTimeline(
                    advanced_settings = null, 
                    primary_objective = null, 
                    secondary_objective = null, 
                    secondary_objectives = [
                        cyperf.models.specific_objective.SpecificObjective(
                            id = '', 
                            max_pending_simulated_users = '80728', 
                            max_simulated_users_per_interval = 56, 
                            timeline = [
                                null
                                ], 
                            type = null, 
                            unit = null, )
                        ], 
                    timeline_segments = [
                        null
                        ], ),
                reset_tags_to_default = [
                    'YQ=='
                    ]
            )
        else:
            return ApplicationProfile(
                name = '',
        )
        """

    def testApplicationProfile(self):
        """Test ApplicationProfile"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
