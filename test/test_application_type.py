# coding: utf-8

"""
    CyPerf Application API

    CyPerf REST API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.application_type import ApplicationType

class TestApplicationType(unittest.TestCase):
    """ApplicationType unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApplicationType:
        """Test ApplicationType
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApplicationType`
        """
        model = ApplicationType()
        if include_optional:
            return ApplicationType(
                commands = [
                    openapi_client.models.command.Command(
                        action_id = '', 
                        description = '', 
                        exchanges = [
                            openapi_client.models.exchange.Exchange(
                                client_endpoint = '', 
                                name = '', 
                                server_endpoint = '', 
                                id = '', )
                            ], 
                        is_strike = True, 
                        metadata = openapi_client.models.metadata.Metadata(
                            auth_method = openapi_client.models.enum.Enum(
                                choices = [
                                    openapi_client.models.choice.Choice(
                                        description = '', 
                                        hidden = True, 
                                        name = '', 
                                        value = '', )
                                    ], 
                                default = '', ), 
                            explicit_proxy = True, 
                            idp_type = openapi_client.models.enum.Enum(
                                default = '', ), 
                            sgw_name = '', 
                            sgw_type = '', 
                            sgw_type_value = '', ), 
                        name = '', 
                        parameters = [
                            openapi_client.models.parameter.Parameter(
                                default_array_elements = [
                                    {
                                        'key' : ''
                                        }
                                    ], 
                                default_source = '', 
                                default_value = '', 
                                element_type = '', 
                                sources = [
                                    ''
                                    ], 
                                type = '', 
                                field = '', 
                                operator = '', 
                                query_param = '', )
                            ], )
                    ],
                connections = [
                    openapi_client.models.connection.Connection(
                        client_endpoint = '', 
                        client_port = 56, 
                        closing_end = '', 
                        disable_encryption = True, 
                        hostname = '', 
                        hostname_param = null, 
                        http_forward_proxy_mode = 'INHERIT_DUT', 
                        is_deprecated = True, 
                        max_transactions = 56, 
                        name = '', 
                        port_settings = null, 
                        readonly = True, 
                        readonly_hostname = True, 
                        readonly_max_trans = True, 
                        readonly_type = True, 
                        server_endpoint = '', 
                        server_port = 56, 
                        type = 'http', 
                        id = '', )
                    ],
                custom_stats = [
                    openapi_client.models.custom_stat.CustomStat(
                        function = '', 
                        path = '', )
                    ],
                data_types = [
                    openapi_client.models.data_type.DataType(
                        values = [
                            openapi_client.models.data_type_values_inner.DataType_Values_inner(
                                id = '', 
                                value_type = '', )
                            ], 
                        id = '', )
                    ],
                definition = openapi_client.models.definition.Definition(
                    xml = 'YQ==', ),
                description = '',
                endpoints = [
                    openapi_client.models.endpoint.Endpoint(
                        name = '', 
                        network_mapping = null, 
                        type = 'Client', 
                        id = '', )
                    ],
                file_name = '',
                has_banner_command = True,
                md5_content = '',
                md5_metadata = '',
                metadata = openapi_client.models.metadata.Metadata(
                    auth_method = openapi_client.models.enum.Enum(
                        choices = [
                            openapi_client.models.choice.Choice(
                                description = '', 
                                hidden = True, 
                                name = '', 
                                value = '', )
                            ], 
                        default = '', ), 
                    explicit_proxy = True, 
                    idp_type = openapi_client.models.enum.Enum(
                        default = '', ), 
                    sgw_name = '', 
                    sgw_type = '', 
                    sgw_type_value = '', ),
                name = '',
                parameters = [
                    openapi_client.models.parameter.Parameter(
                        default_array_elements = [
                            {
                                'key' : ''
                                }
                            ], 
                        default_source = '', 
                        default_value = '', 
                        element_type = '', 
                        metadata = openapi_client.models.parameter_metadata.ParameterMetadata(
                            category = '', 
                            category_index = 56, 
                            default = '', 
                            description = '', 
                            display_name = '', 
                            enum = openapi_client.models.enum.Enum(
                                choices = [
                                    openapi_client.models.choice.Choice(
                                        description = '', 
                                        hidden = True, 
                                        name = '', 
                                        value = '', )
                                    ], 
                                default = '', ), 
                            flow_identifier = True, 
                            input = '', 
                            legacy_names = [
                                ''
                                ], 
                            mandatory = True, 
                            payload = openapi_client.models.payload_metadata.PayloadMetadata(
                                file_extension = '', 
                                file_name = '', 
                                file_type = '', ), 
                            readonly = True, 
                            shared = True, 
                            type = '', 
                            type_info = openapi_client.models.type_info_metadata.TypeInfoMetadata(
                                array_v2 = openapi_client.models.type_array_v2_metadata.TypeArrayV2Metadata(
                                    elements = [
                                        openapi_client.models.array_v2_element_metadata.ArrayV2ElementMetadata(
                                            id = '', 
                                            type = '', )
                                        ], ), 
                                int = openapi_client.models.type_int_metadata.TypeIntMetadata(
                                    max_value = 56, 
                                    min_value = 56, ), 
                                media = openapi_client.models.type_media_metadata.TypeMediaMetadata(
                                    track_id = '', 
                                    track_type = '', ), 
                                string = openapi_client.models.type_string_metadata.TypeStringMetadata(
                                    charset = '', 
                                    max_length = 56, 
                                    min_length = 56, ), ), 
                            unique_value = True, ), 
                        sources = [
                            ''
                            ], 
                        type = '', 
                        field = '', 
                        id = '', 
                        operator = '', 
                        query_param = '', )
                    ],
                strikes = [
                    openapi_client.models.command.Command(
                        action_id = '', 
                        description = '', 
                        exchanges = [
                            openapi_client.models.exchange.Exchange(
                                client_endpoint = '', 
                                name = '', 
                                server_endpoint = '', 
                                id = '', )
                            ], 
                        is_strike = True, 
                        metadata = openapi_client.models.metadata.Metadata(
                            auth_method = openapi_client.models.enum.Enum(
                                choices = [
                                    openapi_client.models.choice.Choice(
                                        description = '', 
                                        hidden = True, 
                                        name = '', 
                                        value = '', )
                                    ], 
                                default = '', ), 
                            explicit_proxy = True, 
                            idp_type = openapi_client.models.enum.Enum(
                                default = '', ), 
                            sgw_name = '', 
                            sgw_type = '', 
                            sgw_type_value = '', ), 
                        name = '', 
                        parameters = [
                            openapi_client.models.parameter.Parameter(
                                default_array_elements = [
                                    {
                                        'key' : ''
                                        }
                                    ], 
                                default_source = '', 
                                default_value = '', 
                                element_type = '', 
                                sources = [
                                    ''
                                    ], 
                                type = '', 
                                field = '', 
                                operator = '', 
                                query_param = '', )
                            ], )
                    ],
                supports_calibration = True,
                supports_client_http_profile = True,
                supports_http_profiles = True,
                supports_server_http_profile = True,
                supports_strikes = True,
                supports_tls = True,
                id = ''
            )
        else:
            return ApplicationType(
        )
        """

    def testApplicationType(self):
        """Test ApplicationType"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
